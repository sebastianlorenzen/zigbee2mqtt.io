"use strict";(self.webpackChunkvp=self.webpackChunkvp||[]).push([[59456],{692546:(e,n,a)=>{a.r(n),a.d(n,{data:()=>l});const l=JSON.parse('{"key":"v-9e5a8700","path":"/guide/usage/debug.html","title":"Debug","lang":"en-US","frontmatter":{"pageClass":"content-page","sidebarDepth":1},"excerpt":"","headers":[{"level":2,"title":"Enabling logging","slug":"enabling-logging","link":"#enabling-logging","children":[]},{"level":2,"title":"Change log level during runtime","slug":"change-log-level-during-runtime","link":"#change-log-level-during-runtime","children":[]},{"level":2,"title":"Publishing to MQTT and to frontend","slug":"publishing-to-mqtt-and-to-frontend","link":"#publishing-to-mqtt-and-to-frontend","children":[]},{"level":2,"title":"Preventing specific namespaces from being logged","slug":"preventing-specific-namespaces-from-being-logged","link":"#preventing-specific-namespaces-from-being-logged","children":[]}],"git":{"updatedTime":1717180801000},"filePathRelative":"guide/usage/debug.md"}')},358857:(e,n,a)=>{a.r(n),a.d(n,{default:()=>m});var l=a(166252);const i=(0,l.uE)('<h1 id="debug" tabindex="-1"><a class="header-anchor" href="#debug" aria-hidden="true">#</a> Debug</h1><p>In case Zigbee2MQTT isn&#39;t working as expected the following tips can help you in finding the problem.</p><h2 id="enabling-logging" tabindex="-1"><a class="header-anchor" href="#enabling-logging" aria-hidden="true">#</a> Enabling logging</h2><p>To enable debug logging, add the following in your <code>configuration.yaml</code></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">advanced</span><span class="token punctuation">:</span>\n  <span class="token key atrule">log_level</span><span class="token punctuation">:</span> debug\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>In the logging you will see the following abbreviations:</p>',6),s=(0,l._)("li",null,[(0,l._)("code",null,"z2m"),(0,l.Uk)(": Zigbee2MQTT")],-1),t=(0,l._)("code",null,"zh",-1),o={href:"https://github.com/koenkk/zigbee-herdsman",target:"_blank",rel:"noopener noreferrer"},r=(0,l._)("code",null,"zhc",-1),d={href:"https://github.com/koenkk/zigbee-herdsman-converters",target:"_blank",rel:"noopener noreferrer"},c=(0,l._)("h2",{id:"change-log-level-during-runtime",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#change-log-level-during-runtime","aria-hidden":"true"},"#"),(0,l.Uk)(" Change log level during runtime")],-1),g=(0,l.uE)('<h2 id="publishing-to-mqtt-and-to-frontend" tabindex="-1"><a class="header-anchor" href="#publishing-to-mqtt-and-to-frontend" aria-hidden="true">#</a> Publishing to MQTT and to frontend</h2><p>In an effort to improve performance, <code>debug</code>-level logs are no longer published to MQTT and to frontend by default. If you want them published, you can use the following setting:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">advanced</span><span class="token punctuation">:</span>\n  <span class="token key atrule">log_debug_to_mqtt_frontend</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="preventing-specific-namespaces-from-being-logged" tabindex="-1"><a class="header-anchor" href="#preventing-specific-namespaces-from-being-logged" aria-hidden="true">#</a> Preventing specific namespaces from being logged</h2><p>A regex-based way to filter out certain <code>debug</code> lines based on their namespaces.</p><p>Examples:</p><p>Filter out log namespaces starting with:</p><ul><li><code>zhc:legacy:fz:tuya</code></li><li>or <code>zhc:legacy:fz:moes</code></li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">advanced</span><span class="token punctuation">:</span>\n  <span class="token key atrule">log_debug_namespace_ignore</span><span class="token punctuation">:</span> <span class="token string">&#39;^zhc:legacy:fz:(tuya|moes)&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Filter out log namespaces starting with:</p><ul><li><code>zhc:legacy:fz:tuya</code></li><li>or <code>zhc:legacy:fz:moes</code></li><li>or <code>zh:ember:uart:</code> (any namespace below <code>uart</code>)</li><li>or <code>zh:controller</code> (any namespace below <code>controller</code> and <code>controller</code> itself)</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">advanced</span><span class="token punctuation">:</span>\n  <span class="token key atrule">log_debug_namespace_ignore</span><span class="token punctuation">:</span> <span class="token string">&#39;^zhc:legacy:fz:(tuya|moes)|^zh:ember:uart:|^zh:controller&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>',12),u={href:"https://regex101.com/",target:"_blank",rel:"noopener noreferrer"},p=(0,l._)("code",null,"ECMAScript (JavaScript)",-1),h={},m=(0,a(983744).Z)(h,[["render",function(e,n){const a=(0,l.up)("ExternalLinkIcon"),h=(0,l.up)("RouterLink");return(0,l.wg)(),(0,l.iD)("div",null,[i,(0,l._)("ul",null,[s,(0,l._)("li",null,[t,(0,l.Uk)(": "),(0,l._)("a",o,[(0,l.Uk)("zigbee-herdsman"),(0,l.Wm)(a)]),(0,l.Uk)(", logged events from the Zigbee library used by Zigbee2MQTT.")]),(0,l._)("li",null,[r,(0,l.Uk)(": "),(0,l._)("a",d,[(0,l.Uk)("zigbee-herdsman-converters"),(0,l.Wm)(a)]),(0,l.Uk)(", logged events from the devices support library.")])]),c,(0,l._)("p",null,[(0,l.Uk)("See "),(0,l.Wm)(h,{to:"/guide/usage/mqtt_topics_and_messages.html"},{default:(0,l.w5)((()=>[(0,l.Uk)("MQTT topics and message structure")])),_:1})]),g,(0,l._)("p",null,[(0,l.Uk)("See "),(0,l._)("a",u,[(0,l.Uk)("https://regex101.com/"),(0,l.Wm)(a)]),(0,l.Uk)(" if you need some help building a regex. Make sure to use Flavor: "),p,(0,l.Uk)(".")])])}]])}}]);